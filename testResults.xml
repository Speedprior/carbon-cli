<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="243" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2024-01-17" time="15:21:47">
  <environment clr-version="Unknown" os-version="23.2.0" user-domain="" nunit-version="2.5.8.0" machine-name="emitrevaGMD6R.vmware.com" user="emitreva" platform="Darwin" cwd="/Users/emitreva/Desktop/Code/CarbonCLI" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="28.7963" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Connect-CbcServer.Tests.ps1" executed="True" result="Success" success="True" time="1.588" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Connect-CbcServer.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Connect-CbcServer" executed="True" result="Success" success="True" time="1.0345" asserts="0" description="Connect-CbcServer">
            <results>
              <test-suite type="TestFixture" name="Connect-CbcServer.When using the 'default' parameter set - exception" executed="True" result="Success" success="True" time="0.4587" asserts="0" description="Connect-CbcServer.When using the 'default' parameter set - exception">
                <results>
                  <test-case description="Should not connect to a server successfully" name="Connect-CbcServer.When using the 'default' parameter set - exception.Should not connect to a server successfully" time="0.32" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Connect-CbcServer.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.7974" asserts="0" description="Connect-CbcServer.When using the 'default' parameter set">
                <results>
                  <test-case description="Should connect to a server successfully" name="Connect-CbcServer.When using the 'default' parameter set.Should connect to a server successfully" time="0.0635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should connect to a server successfully and save the connection" name="Connect-CbcServer.When using the 'default' parameter set.Should connect to a server successfully and save the connection" time="0.0718" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should connect to a second server successfully" name="Connect-CbcServer.When using the 'default' parameter set.Should connect to a second server successfully" time="0.0763" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not connect to a second server if you try to connect to the same server and no -Notes provided" name="Connect-CbcServer.When using the 'default' parameter set.Should not connect to a second server if you try to connect to the same server and no -Notes provided" time="0.0373" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should update the notes if you try to connect to the same server and -Notes param provided" name="Connect-CbcServer.When using the 'default' parameter set.Should update the notes if you try to connect to the same server and -Notes param provided" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should exit (on the warning) when connecting to a second server" name="Connect-CbcServer.When using the 'default' parameter set.Should exit (on the warning) when connecting to a second server" time="0.0379" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Connect-CbcServer.When using the 'menu' parameter set" executed="True" result="Success" success="True" time="0.9488" asserts="0" description="Connect-CbcServer.When using the 'menu' parameter set">
                <results>
                  <test-case description="Should choose a server and connect to it successfully" name="Connect-CbcServer.When using the 'menu' parameter set.Should choose a server and connect to it successfully" time="0.0557" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should choose the second server and connect to it successfully" name="Connect-CbcServer.When using the 'menu' parameter set.Should choose the second server and connect to it successfully" time="0.0347" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not choose any server and throw error" name="Connect-CbcServer.When using the 'menu' parameter set.Should not choose any server and throw error" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw error as no default servers" name="Connect-CbcServer.When using the 'menu' parameter set.Should throw error as no default servers" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Connect-CbcServer.When using the 'credential' parameter set" executed="True" result="Success" success="True" time="1.0215" asserts="0" description="Connect-CbcServer.When using the 'credential' parameter set">
                <results>
                  <test-case description="Shoud connect to server successfully with provided $PSCredential" name="Connect-CbcServer.When using the 'credential' parameter set.Shoud connect to server successfully with provided $PSCredential" time="0.0546" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Disconnect-CbcServer.Tests.ps1" executed="True" result="Success" success="True" time="0.2672" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Disconnect-CbcServer.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Disconnect-CbcServer" executed="True" result="Success" success="True" time="0.0761" asserts="0" description="Disconnect-CbcServer">
            <results>
              <test-case description="Should disconnect all servers" name="Disconnect-CbcServer.Should disconnect all servers" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should disconnect an object connection" name="Disconnect-CbcServer.Should disconnect an object connection" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should disconnect array of objects" name="Disconnect-CbcServer.Should disconnect array of objects" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should disconnect a string connection" name="Disconnect-CbcServer.Should disconnect a string connection" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should disconnect an array of strings" name="Disconnect-CbcServer.Should disconnect an array of strings" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should disconnect empty array of objects" name="Disconnect-CbcServer.Should disconnect empty array of objects" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcAlert.Tests.ps1" executed="True" result="Success" success="True" time="1.0143" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcAlert.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcAlert" executed="True" result="Success" success="True" time="0.8015" asserts="0" description="Get-CbcAlert">
            <results>
              <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.534" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.3577" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When raising exception from get alerts" executed="True" result="Success" success="True" time="0.1029" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When raising exception from get alerts">
                        <results>
                          <test-case description="Should write an error based on the exception that is returned" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When raising exception from get alerts.Should write an error based on the exception that is returned" time="0.0993" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When not using any params" executed="True" result="Success" success="True" time="0.177" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When not using any params">
                        <results>
                          <test-case description="Should return all the alerts within the current connection" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When not using any params.Should return all the alerts within the current connection" time="0.0697" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -DeviceId parameter" executed="True" result="Success" success="True" time="0.2168" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -DeviceId parameter">
                        <results>
                          <test-case description="Should return the alerts according to the deviceid" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -DeviceId parameter.Should return the alerts according to the deviceid" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -DevicePolicy, -ThreatId, -Type, -Severity parameter" executed="True" result="Success" success="True" time="0.2543" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -DevicePolicy, -ThreatId, -Type, -Severity parameter">
                        <results>
                          <test-case description="Should return the alerts according to the params" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -DevicePolicy, -ThreatId, -Type, -Severity parameter.Should return the alerts according to the params" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include parameter" executed="True" result="Success" success="True" time="0.3266" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include parameter">
                        <results>
                          <test-case description="Should return the alerts according to the inclusion" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include parameter.Should return the alerts according to the inclusion" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
                          <test-case description="Should not return alerts, but exception" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include parameter.Should not return alerts, but exception" time="0.041" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include -MaxResults params" executed="True" result="Success" success="True" time="0.3518" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include -MaxResults params">
                        <results>
                          <test-case description="Should return the alerts according to the inclusion and max results" name="Get-CbcAlert.When using the 'default' parameter set.When using one connection.When using the -Include -MaxResults params.Should return the alerts according to the inclusion and max results" time="0.0205" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.529" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When not using any params" executed="True" result="Success" success="True" time="0.0442" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When not using any params">
                        <results>
                          <test-case description="Should return all the alerts" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When not using any params.Should return all the alerts" time="0.04" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When using the -Include parameter" executed="True" result="Success" success="True" time="0.0878" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When using the -Include parameter">
                        <results>
                          <test-case description="Should return the alerts according to the inclusion" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When using the -Include parameter.Should return the alerts according to the inclusion" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When using the -Include -MaxResults params" executed="True" result="Success" success="True" time="0.1273" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When using the -Include -MaxResults params">
                        <results>
                          <test-case description="Should return the alerts according to the inclusion and max results" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When using the -Include -MaxResults params.Should return the alerts according to the inclusion and max results" time="0.0353" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When not using Server" executed="True" result="Success" success="True" time="0.1607" asserts="0" description="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When not using Server">
                        <results>
                          <test-case description="Should return all the alerts for specific Server" name="Get-CbcAlert.When using the 'default' parameter set.When using multiple connections.When not using Server.Should return all the alerts for specific Server" time="0.0278" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'id' parameter set" executed="True" result="Success" success="True" time="0.797" asserts="0" description="Get-CbcAlert.When using the 'id' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'id' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0872" asserts="0" description="Get-CbcAlert.When using the 'id' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return alerts with the same id" name="Get-CbcAlert.When using the 'id' parameter set.When using one connection.Should return alerts with the same id" time="0.031" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return alerts but exception" name="Get-CbcAlert.When using the 'id' parameter set.When using one connection.Should not return alerts but exception" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return alerts with the same id without '-Id' param" name="Get-CbcAlert.When using the 'id' parameter set.When using one connection.Should return alerts with the same id without '-Id' param" time="0.0204" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcAlert.When using the 'id' parameter set.When using multiple connection" executed="True" result="Success" success="True" time="0.2506" asserts="0" description="Get-CbcAlert.When using the 'id' parameter set.When using multiple connection">
                    <results>
                      <test-case description="Should return alerts with the same id from multiple servers" name="Get-CbcAlert.When using the 'id' parameter set.When using multiple connection.Should return alerts with the same id from multiple servers" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return alert from one server when connected to multiple servers" name="Get-CbcAlert.When using the 'id' parameter set.When using multiple connection.Should return alert from one server when connected to multiple servers" time="0.047" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return alerts with the same id without '-Id' param from multiple servers" name="Get-CbcAlert.When using the 'id' parameter set.When using multiple connection.Should return alerts with the same id without '-Id' param from multiple servers" time="0.051" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcDevice.Tests.ps1" executed="True" result="Success" success="True" time="1.1532" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcDevice.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcDevice" executed="True" result="Success" success="True" time="0.9167" asserts="0" description="Get-CbcDevice">
            <results>
              <test-suite type="TestFixture" name="Get-CbcDevice.When using multiple connections with a specific server" executed="True" result="Success" success="True" time="0.1348" asserts="0" description="Get-CbcDevice.When using multiple connections with a specific server">
                <results>
                  <test-case description="Should return devices only from the specific server" name="Get-CbcDevice.When using multiple connections with a specific server.Should return devices only from the specific server" time="0.1274" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.3259" asserts="0" description="Get-CbcDevice.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0819" asserts="0" description="Get-CbcDevice.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'default' parameter set.When using one connection.When not using any params" executed="True" result="Success" success="True" time="0.0429" asserts="0" description="Get-CbcDevice.When using the 'default' parameter set.When using one connection.When not using any params">
                        <results>
                          <test-case description="Should return all the devices within the current connection" name="Get-CbcDevice.When using the 'default' parameter set.When using one connection.When not using any params.Should return all the devices within the current connection" time="0.0391" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'default' parameter set.When using one connection.When returning error from the API" executed="True" result="Success" success="True" time="0.0751" asserts="0" description="Get-CbcDevice.When using the 'default' parameter set.When using one connection.When returning error from the API">
                        <results>
                          <test-case description="Should not return any devices but an error" name="Get-CbcDevice.When using the 'default' parameter set.When using one connection.When returning error from the API.Should not return any devices but an error" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'default' parameter set.When using multiple connection" executed="True" result="Success" success="True" time="0.1798" asserts="0" description="Get-CbcDevice.When using the 'default' parameter set.When using multiple connection">
                    <results>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'default' parameter set.When using multiple connection.When not using any params" executed="True" result="Success" success="True" time="0.0869" asserts="0" description="Get-CbcDevice.When using the 'default' parameter set.When using multiple connection.When not using any params">
                        <results>
                          <test-case description="Should return all the devices from multiple servers" name="Get-CbcDevice.When using the 'default' parameter set.When using multiple connection.When not using any params.Should return all the devices from multiple servers" time="0.0822" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set" executed="True" result="Success" success="True" time="0.7594" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.2165" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection">
                    <results>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Exclude parameter" executed="True" result="Success" success="True" time="0.0513" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Exclude parameter">
                        <results>
                          <test-case description="Should return the devices according to the exclusion" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Exclude parameter.Should return the devices according to the exclusion" time="0.047" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Exclude parameter - exception" executed="True" result="Success" success="True" time="0.0816" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Exclude parameter - exception">
                        <results>
                          <test-case description="Should return the devices according to the exclusion - exception" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Exclude parameter - exception.Should return the devices according to the exclusion - exception" time="0.0261" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Include parameter" executed="True" result="Success" success="True" time="0.1269" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Include parameter">
                        <results>
                          <test-case description="Should return the devices according to the inclusion" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Include parameter.Should return the devices according to the inclusion" time="0.0402" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Include -Exclude and -MaxResults params" executed="True" result="Success" success="True" time="0.1732" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Include -Exclude and -MaxResults params">
                        <results>
                          <test-case description="Should return the devices according to the inclusion and exclusion" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the -Include -Exclude and -MaxResults params.Should return the devices according to the inclusion and exclusion" time="0.0415" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the Os, OsVersion, Status, Priority params" executed="True" result="Success" success="True" time="0.2062" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the Os, OsVersion, Status, Priority params">
                        <results>
                          <test-case description="Should return the devices according to the provided filters" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using one connection.When using the Os, OsVersion, Status, Priority params.Should return the devices according to the provided filters" time="0.0276" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection" executed="True" result="Success" success="True" time="0.4254" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection">
                    <results>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Exclude parameter" executed="True" result="Success" success="True" time="0.0484" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Exclude parameter">
                        <results>
                          <test-case description="Should return the devices according to the exclusion from multiple servers" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Exclude parameter.Should return the devices according to the exclusion from multiple servers" time="0.044" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Include parameter" executed="True" result="Success" success="True" time="0.1022" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Include parameter">
                        <results>
                          <test-case description="Should return the devices according to the inclusion from multiple servers" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Include parameter.Should return the devices according to the inclusion from multiple servers" time="0.046" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Include and -Exclude params" executed="True" result="Success" success="True" time="0.1511" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Include and -Exclude params">
                        <results>
                          <test-case description="Should return the devices according to the inclusion and exclusion from multiple servers" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the -Include and -Exclude params.Should return the devices according to the inclusion and exclusion from multiple servers" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the Os, OsVersion, Status, Priority params with multiple connections" executed="True" result="Success" success="True" time="0.1951" asserts="0" description="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the Os, OsVersion, Status, Priority params with multiple connections">
                        <results>
                          <test-case description="Should return the devices according to the provided filters" name="Get-CbcDevice.When using the 'IncludeExclude' parameter set.When using multiple connection.When using the Os, OsVersion, Status, Priority params with multiple connections.Should return the devices according to the provided filters" time="0.0401" asserts="0" success="True" result="Success" executed="True" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'id' parameter set" executed="True" result="Success" success="True" time="0.9135" asserts="0" description="Get-CbcDevice.When using the 'id' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'id' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0615" asserts="0" description="Get-CbcDevice.When using the 'id' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return device with the same id" name="Get-CbcDevice.When using the 'id' parameter set.When using one connection.Should return device with the same id" time="0.0278" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return device with the same id without '-Id' param" name="Get-CbcDevice.When using the 'id' parameter set.When using one connection.Should return device with the same id without '-Id' param" time="0.0248" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcDevice.When using the 'id' parameter set.When using multiple connection" executed="True" result="Success" success="True" time="0.1496" asserts="0" description="Get-CbcDevice.When using the 'id' parameter set.When using multiple connection">
                    <results>
                      <test-case description="Should return devices with the same id from multiple servers" name="Get-CbcDevice.When using the 'id' parameter set.When using multiple connection.Should return devices with the same id from multiple servers" time="0.0414" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return devices with the same id without '-Id' param from multiple servers" name="Get-CbcDevice.When using the 'id' parameter set.When using multiple connection.Should return devices with the same id without '-Id' param from multiple servers" time="0.0357" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcFeed.Tests.ps1" executed="True" result="Success" success="True" time="0.5797" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcFeed.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcFeed" executed="True" result="Success" success="True" time="0.3959" asserts="0" description="Get-CbcFeed">
            <results>
              <test-suite type="TestFixture" name="Get-CbcFeed.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.3929" asserts="0" description="Get-CbcFeed.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcFeed.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.1102" asserts="0" description="Get-CbcFeed.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return all feeds" name="Get-CbcFeed.When using the 'default' parameter set.When using one connection.Should return all feeds" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return feeds, but exception" name="Get-CbcFeed.When using the 'default' parameter set.When using one connection.Should not return feeds, but exception" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.3898" asserts="0" description="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return all feeds for specific server" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds for specific server" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all feeds for with specific name and access" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds for with specific name and access" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all feeds for with specific name" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds for with specific name" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all feeds for with access" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds for with access" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all feeds" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds" time="0.0341" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all feeds with specified ids" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds with specified ids" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all feeds with specified ids - exception" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return all feeds with specified ids - exception" time="0.1025" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcFeedDetails.Tests.ps1" executed="True" result="Success" success="True" time="0.3949" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcFeedDetails.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcFeed" executed="True" result="Success" success="True" time="0.1997" asserts="0" description="Get-CbcFeed">
            <results>
              <test-suite type="TestFixture" name="Get-CbcFeed.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.196" asserts="0" description="Get-CbcFeed.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcFeed.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0628" asserts="0" description="Get-CbcFeed.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return specific feed with feed id" name="Get-CbcFeed.When using the 'default' parameter set.When using one connection.Should return specific feed with feed id" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1926" asserts="0" description="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return feed by id for specific server" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return feed by id for specific server" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return feed by id - exception" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return feed by id - exception" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return specific feed for CbcFeed" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return specific feed for CbcFeed" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return specific feed for CbcFeed - exception" name="Get-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should return specific feed for CbcFeed - exception" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcIoc.Tests.ps1" executed="True" result="Success" success="True" time="0.5086" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcIoc.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcIoc" executed="True" result="Success" success="True" time="0.3148" asserts="0" description="Get-CbcIoc">
            <results>
              <test-suite type="TestFixture" name="Get-CbcIoc.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.3116" asserts="0" description="Get-CbcIoc.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcIoc.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0888" asserts="0" description="Get-CbcIoc.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return all ioc for a report" name="Get-CbcIoc.When using the 'default' parameter set.When using one connection.Should return all ioc for a report" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a feedid and reportid" name="Get-CbcIoc.When using the 'default' parameter set.When using one connection.Should return all ioc for a feedid and reportid" time="0.0226" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.3084" asserts="0" description="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return all ioc for a report - exception" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a report - exception" time="0.0171" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a report" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a report" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a report and id" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a report and id" time="0.022" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a report and id - none" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a report and id - none" time="0.0344" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return ioc for feedid and reportid - exception" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should not return ioc for feedid and reportid - exception" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a feedid and reportid for all connections with id" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a feedid and reportid for all connections with id" time="0.0363" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a feedid and reportid for all connections" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a feedid and reportid for all connections" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all ioc for a feedid and reportid for specific connection" name="Get-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should return all ioc for a feedid and reportid for specific connection" time="0.021" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcJob.Tests.ps1" executed="True" result="Success" success="True" time="0.4218" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcJob.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcJob" executed="True" result="Success" success="True" time="0.2461" asserts="0" description="Get-CbcJob">
            <results>
              <test-suite type="TestFixture" name="Get-CbcJob.When using multiple connections with a specific server" executed="True" result="Success" success="True" time="0.1554" asserts="0" description="Get-CbcJob.When using multiple connections with a specific server">
                <results>
                  <test-case description="Should return jobs (running) only from the specific server" name="Get-CbcJob.When using multiple connections with a specific server.Should return jobs (running) only from the specific server" time="0.0349" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return process job (running) only from the specific server" name="Get-CbcJob.When using multiple connections with a specific server.Should return process job (running) only from the specific server" time="0.0213" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return process details job (running) only from the specific server" name="Get-CbcJob.When using multiple connections with a specific server.Should return process details job (running) only from the specific server" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return jobs (running) only from the specific server by job object" name="Get-CbcJob.When using multiple connections with a specific server.Should return jobs (running) only from the specific server by job object" time="0.0196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return jobs due to error" name="Get-CbcJob.When using multiple connections with a specific server.Should not return jobs due to error" time="0.0386" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcJob.When using multiple connections" executed="True" result="Success" success="True" time="0.2423" asserts="0" description="Get-CbcJob.When using multiple connections">
                <results>
                  <test-case description="Should return jobs (running)" name="Get-CbcJob.When using multiple connections.Should return jobs (running)" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return any jobs wrong type" name="Get-CbcJob.When using multiple connections.Should not return any jobs wrong type" time="0.0147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return jobs (running) from one server" name="Get-CbcJob.When using multiple connections.Should return jobs (running) from one server" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcObservation.Tests.ps1" executed="True" result="Success" success="True" time="3.7018" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcObservation.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcObservation" executed="True" result="Success" success="True" time="3.5399" asserts="0" description="Get-CbcObservation">
            <results>
              <test-suite type="TestFixture" name="Get-CbcObservation.When using single connections " executed="True" result="Success" success="True" time="3.5372" asserts="0" description="Get-CbcObservation.When using single connections ">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcObservation.When using single connections .When using the 'IncludeExclude' parameter set" executed="True" result="Success" success="True" time="1.1862" asserts="0" description="Get-CbcObservation.When using single connections .When using the 'IncludeExclude' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcObservation.When using single connections .When using the 'IncludeExclude' parameter set.Should set the HTTP Request Body accordingly" time="1.1804" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set" executed="True" result="Success" success="True" time="3.5131" asserts="0" description="Get-CbcObservation.When using single connections .When using the 'Id' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly" time="0.5722" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should set the HTTP Request Body accordingly - Alert" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly - Alert" time="0.6038" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should set the filter parameters as criteria accordingly" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set.Should set the filter parameters as criteria accordingly" time="0.5601" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should set the query parameter accordingly" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set.Should set the query parameter accordingly" time="0.5673" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return job object" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set.Should return job object" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set - exceptions" executed="True" result="Success" success="True" time="3.5347" asserts="0" description="Get-CbcObservation.When using single connections .When using the 'Id' parameter set - exceptions">
                    <results>
                      <test-case description="Should fail upon creating job" name="Get-CbcObservation.When using single connections .When using the 'Id' parameter set - exceptions.Should fail upon creating job" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcObservationDetails.Tests.ps1" executed="True" result="Success" success="True" time="5.9354" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcObservationDetails.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcObservationDetails" executed="True" result="Success" success="True" time="5.7756" asserts="0" description="Get-CbcObservationDetails">
            <results>
              <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using single connections " executed="True" result="Success" success="True" time="3.4836" asserts="0" description="Get-CbcObservationDetails.When using single connections ">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using single connections .When using the 'Id' parameter set" executed="True" result="Success" success="True" time="0.6411" asserts="0" description="Get-CbcObservationDetails.When using single connections .When using the 'Id' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcObservationDetails.When using single connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly" time="0.6082" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return CbcJob object" name="Get-CbcObservationDetails.When using single connections .When using the 'Id' parameter set.Should return CbcJob object" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should fail with exception" name="Get-CbcObservationDetails.When using single connections .When using the 'Id' parameter set.Should fail with exception" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using single connections .When using the 'AlertId' parameter set" executed="True" result="Success" success="True" time="1.7227" asserts="0" description="Get-CbcObservationDetails.When using single connections .When using the 'AlertId' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcObservationDetails.When using single connections .When using the 'AlertId' parameter set.Should set the HTTP Request Body accordingly" time="1.0755" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using single connections .When using the 'Alert' parameter set" executed="True" result="Success" success="True" time="2.3226" asserts="0" description="Get-CbcObservationDetails.When using single connections .When using the 'Alert' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly - Alert" name="Get-CbcObservationDetails.When using single connections .When using the 'Alert' parameter set.Should set the HTTP Request Body accordingly - Alert" time="0.5946" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using single connections .When using the 'Observation' parameter set" executed="True" result="Success" success="True" time="3.48" asserts="0" description="Get-CbcObservationDetails.When using single connections .When using the 'Observation' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly - Observation" name="Get-CbcObservationDetails.When using single connections .When using the 'Observation' parameter set.Should set the HTTP Request Body accordingly - Observation" time="1.1508" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using multiple connections " executed="True" result="Success" success="True" time="5.7735" asserts="0" description="Get-CbcObservationDetails.When using multiple connections ">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using multiple connections .When using the 'Id' parameter set" executed="True" result="Success" success="True" time="1.1641" asserts="0" description="Get-CbcObservationDetails.When using multiple connections .When using the 'Id' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcObservationDetails.When using multiple connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly" time="1.1595" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcObservationDetails.When using multiple connections .When using the 'AlertId' parameter set" executed="True" result="Success" success="True" time="2.2858" asserts="0" description="Get-CbcObservationDetails.When using multiple connections .When using the 'AlertId' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcObservationDetails.When using multiple connections .When using the 'AlertId' parameter set.Should set the HTTP Request Body accordingly" time="1.1191" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcPolicy.Tests.ps1" executed="True" result="Success" success="True" time="0.2843" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcPolicy.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcPolicy" executed="True" result="Success" success="True" time="0.1278" asserts="0" description="Get-CbcPolicy">
            <results>
              <test-suite type="TestFixture" name="Get-CbcPolicy.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1251" asserts="0" description="Get-CbcPolicy.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcPolicy.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0733" asserts="0" description="Get-CbcPolicy.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return all policies" name="Get-CbcPolicy.When using the 'default' parameter set.When using one connection.Should return all policies" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return policies, but exception" name="Get-CbcPolicy.When using the 'default' parameter set.When using one connection.Should not return policies, but exception" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcPolicy.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1227" asserts="0" description="Get-CbcPolicy.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return all policies for specific server" name="Get-CbcPolicy.When using the 'default' parameter set.When using multiple connections.Should return all policies for specific server" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all policies" name="Get-CbcPolicy.When using the 'default' parameter set.When using multiple connections.Should return all policies" time="0.0228" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcPolicyDetails.Tests.ps1" executed="True" result="Success" success="True" time="0.28" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcPolicyDetails.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcPolicyDetails" executed="True" result="Success" success="True" time="0.1407" asserts="0" description="Get-CbcPolicyDetails">
            <results>
              <test-suite type="TestFixture" name="Get-CbcPolicyDetails.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1383" asserts="0" description="Get-CbcPolicyDetails.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcPolicyDetails.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0899" asserts="0" description="Get-CbcPolicyDetails.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return concrete policy id" name="Get-CbcPolicyDetails.When using the 'default' parameter set.When using one connection.Should return concrete policy id" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return concrete policy, but exception" name="Get-CbcPolicyDetails.When using the 'default' parameter set.When using one connection.Should not return concrete policy, but exception" time="0.021" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcPolicyDetails.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1359" asserts="0" description="Get-CbcPolicyDetails.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return all policies" name="Get-CbcPolicyDetails.When using the 'default' parameter set.When using multiple connections.Should return all policies" time="0.0195" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all policies for specific server" name="Get-CbcPolicyDetails.When using the 'default' parameter set.When using multiple connections.Should return all policies for specific server" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcProcess.Tests.ps1" executed="True" result="Success" success="True" time="3.2454" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcProcess.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcProcess" executed="True" result="Success" success="True" time="3.0917" asserts="0" description="Get-CbcProcess">
            <results>
              <test-suite type="TestFixture" name="Get-CbcProcess.When using single connections " executed="True" result="Success" success="True" time="3.0892" asserts="0" description="Get-CbcProcess.When using single connections ">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcProcess.When using single connections .When using the 'IncludeExclude' parameter set" executed="True" result="Success" success="True" time="2.4783" asserts="0" description="Get-CbcProcess.When using single connections .When using the 'IncludeExclude' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcProcess.When using single connections .When using the 'IncludeExclude' parameter set.Should set the HTTP Request Body accordingly" time="1.1331" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should set the HTTP Request Body accordingly based on filter parameters" name="Get-CbcProcess.When using single connections .When using the 'IncludeExclude' parameter set.Should set the HTTP Request Body accordingly based on filter parameters" time="0.5745" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should set the HTTP Request Body accordingly based on query" name="Get-CbcProcess.When using single connections .When using the 'IncludeExclude' parameter set.Should set the HTTP Request Body accordingly based on query" time="0.7474" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcProcess.When using single connections .When using the 'Id' parameter set" executed="True" result="Success" success="True" time="3.0619" asserts="0" description="Get-CbcProcess.When using single connections .When using the 'Id' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcProcess.When using single connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly" time="0.5621" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return job object" name="Get-CbcProcess.When using single connections .When using the 'Id' parameter set.Should return job object" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcProcess.When using single connections .When using the 'Id' parameter set - exceptions" executed="True" result="Success" success="True" time="3.0813" asserts="0" description="Get-CbcProcess.When using single connections .When using the 'Id' parameter set - exceptions">
                    <results>
                      <test-case description="Should fail upon creating job" name="Get-CbcProcess.When using single connections .When using the 'Id' parameter set - exceptions.Should fail upon creating job" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcProcessDetails.Tests.ps1" executed="True" result="Success" success="True" time="3.088" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcProcessDetails.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcProcessDetails" executed="True" result="Success" success="True" time="2.9242" asserts="0" description="Get-CbcProcessDetails">
            <results>
              <test-suite type="TestFixture" name="Get-CbcProcessDetails.When using single connections " executed="True" result="Success" success="True" time="1.7879" asserts="0" description="Get-CbcProcessDetails.When using single connections ">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcProcessDetails.When using single connections .When using the 'Id' parameter set" executed="True" result="Success" success="True" time="1.7854" asserts="0" description="Get-CbcProcessDetails.When using single connections .When using the 'Id' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcProcessDetails.When using single connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly" time="0.6087" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should set the HTTP Request Body accordingly - Process" name="Get-CbcProcessDetails.When using single connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly - Process" time="1.1339" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return CbcJob object" name="Get-CbcProcessDetails.When using single connections .When using the 'Id' parameter set.Should return CbcJob object" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should fail with exception" name="Get-CbcProcessDetails.When using single connections .When using the 'Id' parameter set.Should fail with exception" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-CbcProcessDetails.When using multiple connections " executed="True" result="Success" success="True" time="2.9216" asserts="0" description="Get-CbcProcessDetails.When using multiple connections ">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcProcessDetails.When using multiple connections .When using the 'Id' parameter set" executed="True" result="Success" success="True" time="1.1314" asserts="0" description="Get-CbcProcessDetails.When using multiple connections .When using the 'Id' parameter set">
                    <results>
                      <test-case description="Should set the HTTP Request Body accordingly" name="Get-CbcProcessDetails.When using multiple connections .When using the 'Id' parameter set.Should set the HTTP Request Body accordingly" time="1.129" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcReport.Tests.ps1" executed="True" result="Success" success="True" time="0.3523" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcReport.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcReport" executed="True" result="Success" success="True" time="0.2005" asserts="0" description="Get-CbcReport">
            <results>
              <test-suite type="TestFixture" name="Get-CbcReport.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1983" asserts="0" description="Get-CbcReport.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcReport.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0604" asserts="0" description="Get-CbcReport.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return all reports for a feed" name="Get-CbcReport.When using the 'default' parameter set.When using one connection.Should return all reports for a feed" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return reports, but exception" name="Get-CbcReport.When using the 'default' parameter set.When using one connection.Should not return reports, but exception" time="0.0182" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not return reports by CbcFeed, but exception" name="Get-CbcReport.When using the 'default' parameter set.When using one connection.Should not return reports by CbcFeed, but exception" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1958" asserts="0" description="Get-CbcReport.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return all reports for specific server" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections.Should return all reports for specific server" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all reports" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections.Should return all reports" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all reports with specific id" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections.Should return all reports with specific id" time="0.0205" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all reports with specific id for specific server" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections.Should return all reports with specific id for specific server" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all reports by CbcFeed" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections.Should return all reports by CbcFeed" time="0.0199" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all reports with specific id by CbcFeed" name="Get-CbcReport.When using the 'default' parameter set.When using multiple connections.Should return all reports with specific id by CbcFeed" time="0.0238" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcWatchlist.Tests.ps1" executed="True" result="Success" success="True" time="0.3139" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Get-CbcWatchlist.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-CbcWatchlist" executed="True" result="Success" success="True" time="0.163" asserts="0" description="Get-CbcWatchlist">
            <results>
              <test-suite type="TestFixture" name="Get-CbcWatchlist.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1606" asserts="0" description="Get-CbcWatchlist.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Get-CbcWatchlist.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.05" asserts="0" description="Get-CbcWatchlist.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should return all watchlists" name="Get-CbcWatchlist.When using the 'default' parameter set.When using one connection.Should return all watchlists" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1581" asserts="0" description="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should return all watchlists for all connections" name="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should return all watchlists for all connections" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all watchlists for all connections - exception" name="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should return all watchlists for all connections - exception" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all watchlists for specific connection" name="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should return all watchlists for specific connection" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all watchlists for all connections - specific name" name="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should return all watchlists for all connections - specific name" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should return all watchlists for all connections - specific id" name="Get-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should return all watchlists for all connections - specific id" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcFeed.Tests.ps1" executed="True" result="Success" success="True" time="0.2787" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcFeed.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-CbcFeed" executed="True" result="Success" success="True" time="0.122" asserts="0" description="New-CbcFeed">
            <results>
              <test-suite type="TestFixture" name="New-CbcFeed.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1196" asserts="0" description="New-CbcFeed.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="New-CbcFeed.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0511" asserts="0" description="New-CbcFeed.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should create feed" name="New-CbcFeed.When using the 'default' parameter set.When using one connection.Should create feed" time="0.0356" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not create feed" name="New-CbcFeed.When using the 'default' parameter set.When using one connection.Should not create feed" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="New-CbcFeed.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1172" asserts="0" description="New-CbcFeed.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should create feed for specific connections" name="New-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should create feed for specific connections" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create feed for all connections" name="New-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should create feed for all connections" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create feed for all connections with custom body" name="New-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should create feed for all connections with custom body" time="0.0226" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcIoc.Tests.ps1" executed="True" result="Success" success="True" time="0.3345" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcIoc.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-CbcIoc" executed="True" result="Success" success="True" time="0.1963" asserts="0" description="New-CbcIoc">
            <results>
              <test-suite type="TestFixture" name="New-CbcIoc.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1943" asserts="0" description="New-CbcIoc.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="New-CbcIoc.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0632" asserts="0" description="New-CbcIoc.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should create ioc" name="New-CbcIoc.When using the 'default' parameter set.When using one connection.Should create ioc" time="0.0574" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="New-CbcIoc.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1899" asserts="0" description="New-CbcIoc.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should create ioc for specific connections" name="New-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should create ioc for specific connections" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create ioc for specific connections - exception" name="New-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should create ioc for specific connections - exception" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create ioc for all connections" name="New-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should create ioc for all connections" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create ioc for CbcReport" name="New-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should create ioc for CbcReport" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not create ioc for CbcReport - exception" name="New-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should not create ioc for CbcReport - exception" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcReport.Tests.ps1" executed="True" result="Success" success="True" time="0.4375" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcReport.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-CbcReport" executed="True" result="Success" success="True" time="0.2913" asserts="0" description="New-CbcReport">
            <results>
              <test-suite type="TestFixture" name="New-CbcReport.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.2891" asserts="0" description="New-CbcReport.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="New-CbcReport.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.084" asserts="0" description="New-CbcReport.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should create report" name="New-CbcReport.When using the 'default' parameter set.When using one connection.Should create report" time="0.034" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create report using CbcFeed" name="New-CbcReport.When using the 'default' parameter set.When using one connection.Should create report using CbcFeed" time="0.0437" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.2868" asserts="0" description="New-CbcReport.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should create feed for specific connections" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections.Should create feed for specific connections" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create report for all connections" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections.Should create report for all connections" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create report for all connections - exception" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections.Should create report for all connections - exception" time="0.046" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create report for all connections with custom body" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections.Should create report for all connections with custom body" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create report for all connections with custom body from CbcFeed" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections.Should create report for all connections with custom body from CbcFeed" time="0.0251" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create report for all connections with custom body from CbcFeed - exception" name="New-CbcReport.When using the 'default' parameter set.When using multiple connections.Should create report for all connections with custom body from CbcFeed - exception" time="0.0226" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcWatchlist.Tests.ps1" executed="True" result="Success" success="True" time="0.3281" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/New-CbcWatchlist.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="New-CbcWatchlist" executed="True" result="Success" success="True" time="0.1839" asserts="0" description="New-CbcWatchlist">
            <results>
              <test-suite type="TestFixture" name="New-CbcWatchlist.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1817" asserts="0" description="New-CbcWatchlist.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="New-CbcWatchlist.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0375" asserts="0" description="New-CbcWatchlist.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should create watchlist" name="New-CbcWatchlist.When using the 'default' parameter set.When using one connection.Should create watchlist" time="0.0332" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1798" asserts="0" description="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should create watchlist for specific connections" name="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should create watchlist for specific connections" time="0.0248" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create watchlist for all connections" name="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should create watchlist for all connections" time="0.0371" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to create watchlist for all connections - exception" name="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should try to create watchlist for all connections - exception" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create watchlist for CbcFeed" name="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should create watchlist for CbcFeed" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should create watchlist for CbcFeed - exception" name="New-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should create watchlist for CbcFeed - exception" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Receive-CbcJob.Tests.ps1" executed="True" result="Success" success="True" time="0.3769" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Receive-CbcJob.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Receive-CbcJob" executed="True" result="Success" success="True" time="0.2346" asserts="0" description="Receive-CbcJob">
            <results>
              <test-suite type="TestFixture" name="Receive-CbcJob.When using multiple connections with a specific server" executed="True" result="Success" success="True" time="0.0806" asserts="0" description="Receive-CbcJob.When using multiple connections with a specific server">
                <results>
                  <test-case description="Should return jobs (completed) only from the specific server" name="Receive-CbcJob.When using multiple connections with a specific server.Should return jobs (completed) only from the specific server" time="0.0195" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return jobs (completed) only from the specific server by job object" name="Receive-CbcJob.When using multiple connections with a specific server.Should return jobs (completed) only from the specific server by job object" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return jobs (still running) only from the specific server by job object" name="Receive-CbcJob.When using multiple connections with a specific server.Should not return jobs (still running) only from the specific server by job object" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return jobs due to error" name="Receive-CbcJob.When using multiple connections with a specific server.Should not return jobs due to error" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Receive-CbcJob.When using multiple connections" executed="True" result="Success" success="True" time="0.2316" asserts="0" description="Receive-CbcJob.When using multiple connections">
                <results>
                  <test-case description="Should return one job (the other still running)" name="Receive-CbcJob.When using multiple connections.Should return one job (the other still running)" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return one process job (the other still running)" name="Receive-CbcJob.When using multiple connections.Should return one process job (the other still running)" time="0.0249" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return one process details job (the other still running)" name="Receive-CbcJob.When using multiple connections.Should return one process details job (the other still running)" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not return any jobs wrong type" name="Receive-CbcJob.When using multiple connections.Should not return any jobs wrong type" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return jobs (completed) from one server" name="Receive-CbcJob.When using multiple connections.Should return jobs (completed) from one server" time="0.025" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcFeed.Tests.ps1" executed="True" result="Success" success="True" time="0.2411" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcFeed.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Remove-CbcFeed" executed="True" result="Success" success="True" time="0.0988" asserts="0" description="Remove-CbcFeed">
            <results>
              <test-suite type="TestFixture" name="Remove-CbcFeed.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.0927" asserts="0" description="Remove-CbcFeed.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Remove-CbcFeed.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0136" asserts="0" description="Remove-CbcFeed.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should remove feed" name="Remove-CbcFeed.When using the 'default' parameter set.When using one connection.Should remove feed" time="0.0098" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.0904" asserts="0" description="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should delete feed for specific connections" name="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should delete feed for specific connections" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete feed for all connections" name="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should delete feed for all connections" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to delete feed for all connections - exception" name="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should try to delete feed for all connections - exception" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete feed - CbcFeed" name="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should delete feed - CbcFeed" time="0.0117" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete feed CbcFeed - exception" name="Remove-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should delete feed CbcFeed - exception" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcIoc.Tests.ps1" executed="True" result="Success" success="True" time="0.3647" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcIoc.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Remove-CbcIoc" executed="True" result="Success" success="True" time="0.2222" asserts="0" description="Remove-CbcIoc">
            <results>
              <test-suite type="TestFixture" name="Remove-CbcIoc.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.2203" asserts="0" description="Remove-CbcIoc.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Remove-CbcIoc.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.09" asserts="0" description="Remove-CbcIoc.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should remove ioc" name="Remove-CbcIoc.When using the 'default' parameter set.When using one connection.Should remove ioc" time="0.0846" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.2181" asserts="0" description="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should delete ioc for specific connections" name="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should delete ioc for specific connections" time="0.0208" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete ioc for all connections" name="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should delete ioc for all connections" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to delete ioc for all connections - exception" name="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should try to delete ioc for all connections - exception" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete ioc - CbcIoc" name="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should delete ioc - CbcIoc" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete ioc CbcIoc - exception" name="Remove-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should delete ioc CbcIoc - exception" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcReport.Tests.ps1" executed="True" result="Success" success="True" time="0.2439" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcReport.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Remove-CbcReport" executed="True" result="Success" success="True" time="0.1041" asserts="0" description="Remove-CbcReport">
            <results>
              <test-suite type="TestFixture" name="Remove-CbcReport.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1015" asserts="0" description="Remove-CbcReport.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Remove-CbcReport.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0172" asserts="0" description="Remove-CbcReport.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should remove report" name="Remove-CbcReport.When using the 'default' parameter set.When using one connection.Should remove report" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.0994" asserts="0" description="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should delete report for specific connections" name="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections.Should delete report for specific connections" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete report for all connections" name="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections.Should delete report for all connections" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to delete report for all connections - exception" name="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections.Should try to delete report for all connections - exception" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete report - CbcReport" name="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections.Should delete report - CbcReport" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete report CbcReport - exception" name="Remove-CbcReport.When using the 'default' parameter set.When using multiple connections.Should delete report CbcReport - exception" time="0.025" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcWatchlist.Tests.ps1" executed="True" result="Success" success="True" time="0.2239" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Remove-CbcWatchlist.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Remove-CbcWatchlist" executed="True" result="Success" success="True" time="0.0944" asserts="0" description="Remove-CbcWatchlist">
            <results>
              <test-suite type="TestFixture" name="Remove-CbcWatchlist.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.0922" asserts="0" description="Remove-CbcWatchlist.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.012" asserts="0" description="Remove-CbcWatchlist.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should remove watchlist" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using one connection.Should remove watchlist" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.087" asserts="0" description="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should delete watchlist for specific connections" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should delete watchlist for specific connections" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete watchlist for all connections" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should delete watchlist for all connections" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to delete watchlist for all connections - exception" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should try to delete watchlist for all connections - exception" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete watchlist - CbcWatchlist" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should delete watchlist - CbcWatchlist" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should delete watchlist CbcWatchlist - exception" name="Remove-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should delete watchlist CbcWatchlist - exception" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcAlert.Tests.ps1" executed="True" result="Success" success="True" time="0.2597" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcAlert.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-CbcAlert" executed="True" result="Success" success="True" time="0.1184" asserts="0" description="Set-CbcAlert">
            <results>
              <test-suite type="TestFixture" name="Set-CbcAlert.When using a CbcAlert object" executed="True" result="Success" success="True" time="0.0432" asserts="0" description="Set-CbcAlert.When using a CbcAlert object">
                <results>
                  <test-case description="Should dismiss alert" name="Set-CbcAlert.When using a CbcAlert object.Should dismiss alert" time="0.041" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Set-CbcAlert.When using Id " executed="True" result="Success" success="True" time="0.1084" asserts="0" description="Set-CbcAlert.When using Id ">
                <results>
                  <test-case description="Should dismiss alert by Id" name="Set-CbcAlert.When using Id .Should dismiss alert by Id" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should dismiss alert by Id for specific server" name="Set-CbcAlert.When using Id .Should dismiss alert by Id for specific server" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should dismiss alert by Id for specific server error" name="Set-CbcAlert.When using Id .Should dismiss alert by Id for specific server error" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcDevice.Tests.ps1" executed="True" result="Success" success="True" time="0.7975" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcDevice.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-CbcDevice" executed="True" result="Success" success="True" time="0.6381" asserts="0" description="Set-CbcDevice">
            <results>
              <test-suite type="TestFixture" name="Set-CbcDevice.When using a CbcDevice object" executed="True" result="Success" success="True" time="0.5807" asserts="0" description="Set-CbcDevice.When using a CbcDevice object">
                <results>
                  <test-case description="Should quarantine the device - error" name="Set-CbcDevice.When using a CbcDevice object.Should quarantine the device - error" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should quarantine the device" name="Set-CbcDevice.When using a CbcDevice object.Should quarantine the device" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should quarantine the devices" name="Set-CbcDevice.When using a CbcDevice object.Should quarantine the devices" time="0.0388" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should unquarantine the device" name="Set-CbcDevice.When using a CbcDevice object.Should unquarantine the device" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should unquarantine the devices" name="Set-CbcDevice.When using a CbcDevice object.Should unquarantine the devices" time="0.059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should scan the device" name="Set-CbcDevice.When using a CbcDevice object.Should scan the device" time="0.0386" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should scan the devices" name="Set-CbcDevice.When using a CbcDevice object.Should scan the devices" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pause the scan on the device" name="Set-CbcDevice.When using a CbcDevice object.Should pause the scan on the device" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pause the scan on the devices" name="Set-CbcDevice.When using a CbcDevice object.Should pause the scan on the devices" time="0.0355" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should update the sensor of the device" name="Set-CbcDevice.When using a CbcDevice object.Should update the sensor of the device" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should update the sensor of the devices" name="Set-CbcDevice.When using a CbcDevice object.Should update the sensor of the devices" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should uninstall the sensor of the device" name="Set-CbcDevice.When using a CbcDevice object.Should uninstall the sensor of the device" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should uninstall the sensor of the devices" name="Set-CbcDevice.When using a CbcDevice object.Should uninstall the sensor of the devices" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should enable bypass the device" name="Set-CbcDevice.When using a CbcDevice object.Should enable bypass the device" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should enable bypass the devices" name="Set-CbcDevice.When using a CbcDevice object.Should enable bypass the devices" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should disable bypass the device" name="Set-CbcDevice.When using a CbcDevice object.Should disable bypass the device" time="0.0207" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should disable bypass the devices" name="Set-CbcDevice.When using a CbcDevice object.Should disable bypass the devices" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should update the policy of the device using PolicyId" name="Set-CbcDevice.When using a CbcDevice object.Should update the policy of the device using PolicyId" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should update the policy of the device using Policy object" name="Set-CbcDevice.When using a CbcDevice object.Should update the policy of the device using Policy object" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Set-CbcDevice.When using DeviceId param" executed="True" result="Success" success="True" time="0.6186" asserts="0" description="Set-CbcDevice.When using DeviceId param">
                <results>
                  <test-case description="Should quarantine the device" name="Set-CbcDevice.When using DeviceId param.Should quarantine the device" time="0.0355" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcFeed.Tests.ps1" executed="True" result="Success" success="True" time="0.3386" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcFeed.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-CbcFeed" executed="True" result="Success" success="True" time="0.1945" asserts="0" description="Set-CbcFeed">
            <results>
              <test-suite type="TestFixture" name="Set-CbcFeed.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1921" asserts="0" description="Set-CbcFeed.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Set-CbcFeed.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0538" asserts="0" description="Set-CbcFeed.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should update feed" name="Set-CbcFeed.When using the 'default' parameter set.When using one connection.Should update feed" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.189" asserts="0" description="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should update feed for specific connections" name="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should update feed for specific connections" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update feed for all connections" name="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should update feed for all connections" time="0.0339" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to update feed for all connections - exception" name="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should try to update feed for all connections - exception" time="0.0227" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update feed - CbcFeed" name="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should update feed - CbcFeed" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update feed CbcFeed - exception" name="Set-CbcFeed.When using the 'default' parameter set.When using multiple connections.Should update feed CbcFeed - exception" time="0.0221" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcIoc.Tests.ps1" executed="True" result="Success" success="True" time="0.7403" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcIoc.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-CbcIoc" executed="True" result="Success" success="True" time="0.5877" asserts="0" description="Set-CbcIoc">
            <results>
              <test-suite type="TestFixture" name="Set-CbcIoc.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.5855" asserts="0" description="Set-CbcIoc.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Set-CbcIoc.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0548" asserts="0" description="Set-CbcIoc.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should update ioc" name="Set-CbcIoc.When using the 'default' parameter set.When using one connection.Should update ioc" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.5833" asserts="0" description="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should update ioc for specific connections" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc for specific connections" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc for specific connections - exception" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc for specific connections - exception" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc for all connections - no updates" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc for all connections - no updates" time="0.0101" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc for all connections - no iocs to update" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc for all connections - no iocs to update" time="0.2703" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc for all connections" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc for all connections" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc by providing CbcIoc" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc by providing CbcIoc" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc by providing CbcIoc - no iocs to update" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc by providing CbcIoc - no iocs to update" time="0.0966" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update ioc by providing CbcIoc - no updates" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should update ioc by providing CbcIoc - no updates" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should not update ioc for CbcReport - exception" name="Set-CbcIoc.When using the 'default' parameter set.When using multiple connections.Should not update ioc for CbcReport - exception" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcReport.Tests.ps1" executed="True" result="Success" success="True" time="0.3514" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcReport.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-CbcReport" executed="True" result="Success" success="True" time="0.1961" asserts="0" description="Set-CbcReport">
            <results>
              <test-suite type="TestFixture" name="Set-CbcReport.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1931" asserts="0" description="Set-CbcReport.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Set-CbcReport.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0451" asserts="0" description="Set-CbcReport.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should update report" name="Set-CbcReport.When using the 'default' parameter set.When using one connection.Should update report" time="0.0395" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Set-CbcReport.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1905" asserts="0" description="Set-CbcReport.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should update report for specific connections" name="Set-CbcReport.When using the 'default' parameter set.When using multiple connections.Should update report for specific connections" time="0.0194" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update report for all connections" name="Set-CbcReport.When using the 'default' parameter set.When using multiple connections.Should update report for all connections" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to update report for all connections - exception" name="Set-CbcReport.When using the 'default' parameter set.When using multiple connections.Should try to update report for all connections - exception" time="0.0314" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update report - CbcReport" name="Set-CbcReport.When using the 'default' parameter set.When using multiple connections.Should update report - CbcReport" time="0.016" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update report CbcReport - exception" name="Set-CbcReport.When using the 'default' parameter set.When using multiple connections.Should update report CbcReport - exception" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcWatchlist.Tests.ps1" executed="True" result="Success" success="True" time="0.351" asserts="0" description="/Users/emitreva/Desktop/Code/CarbonCLI/Tests/Public/Set-CbcWatchlist.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-CbcWatchlist" executed="True" result="Success" success="True" time="0.1946" asserts="0" description="Set-CbcWatchlist">
            <results>
              <test-suite type="TestFixture" name="Set-CbcWatchlist.When using the 'default' parameter set" executed="True" result="Success" success="True" time="0.1915" asserts="0" description="Set-CbcWatchlist.When using the 'default' parameter set">
                <results>
                  <test-suite type="TestFixture" name="Set-CbcWatchlist.When using the 'default' parameter set.When using one connection" executed="True" result="Success" success="True" time="0.0454" asserts="0" description="Set-CbcWatchlist.When using the 'default' parameter set.When using one connection">
                    <results>
                      <test-case description="Should update watchlist" name="Set-CbcWatchlist.When using the 'default' parameter set.When using one connection.Should update watchlist" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections" executed="True" result="Success" success="True" time="0.1889" asserts="0" description="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections">
                    <results>
                      <test-case description="Should update watchlist for specific connections" name="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should update watchlist for specific connections" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update watchlist for all connections" name="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should update watchlist for all connections" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should try to update watchlist for all connections - exception" name="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should try to update watchlist for all connections - exception" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update watchlist - CbcWatchlist" name="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should update watchlist - CbcWatchlist" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="Should update watchlist CbcWatchlist - exception" name="Set-CbcWatchlist.When using the 'default' parameter set.When using multiple connections.Should update watchlist CbcWatchlist - exception" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>